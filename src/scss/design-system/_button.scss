/* Button styles */
$buttons: (
  default: (
    fontSize: 16px,
    fontWeight: 600,
    padding: 8px 16px,
    height: 40px,
    borderRadius: 4px
  ),
  inverse: (
    fontSize: 16px,
    fontWeight: 600,
    padding: 8px 16px,
    height: 40px,
    borderRadius: 4px
  )
);

button,
.btn {
  display: inline-flex;
  padding: map-deep-get($buttons, "default", "padding");
  height: map-deep-get($buttons, "default", "height");
  align-items: center;
  justify-content: center;
  color: var(--color-white);
  font-family: var(--font-family-latoregular);
  font-size: map-deep-get($buttons, "default", "fontSize");
  font-weight: map-deep-get($buttons, "default", "fontWeight");
  text-transform: unset;
  appearance: none;
  background-color: var(--color-torch-red);
  border: 1.5px solid var(--color-torch-red);
  border-radius: map-deep-get($buttons, "default", "borderRadius");
  outline: none;
  transition: background-color 100ms ease-in-out, box-shadow 100ms ease-in-out;
  cursor: pointer;
  opacity: 1;

  a {
    color: var(--color-white);
    font-weight: 600;
    opacity: 1;

    &:hover {
      color: var(--color-torch-red);
    }
  }

  /* Hover */ 
  &:hover {
    background-color: #FFE5EE;
    border-color: #FFE5EE;
    color: var(--color-torch-red);

    a {
      color: var(--color-torch-red);
      font-weight: 600;
    }
  }

  /* If icon provided */
  .icon {
    margin-right: 16px;
  }

  &--inverse {
    background-color: #FFE5EE;
    border-color: #FFE5EE;

    a {
      color: var(--color-torch-red);
    }

    &:hover {
      background-color: var(--color-torch-red);
      border-color: var(--color-torch-red);

      a {
        color: var(--color-white);
      }
    }
  }
}

.btn--inverse {
  color: var(--color-torch-red);

  &:hover {
    color: var(--color-white);
  }
}

@each $name, $button in $buttons {
  .btn--#{$name} {
    padding: map-get($button, "padding");
    height: map-get($button, "height");
    font-size: map-get($button, "fontSize");
    font-weight: map-get($button, "fontWeight");
    border-radius: map-get($button, "borderRadius");
  }
}

@each $name, $color in $primary-colors {
  .btn--#{$name} {
    color: map-get($color, "contrast");
    background-color: map-get($color, "base");

    &:hover {
      background-color: darken(map-get($color, "base"), 5%);
    }

    &:focus {
      background-color: darken(map-get($color, "base"), 5%);
      box-shadow: 0 0 0 2px rgba(map-get($color, "base"),.5);
    }

    &:active {
      background-color: lighten(map-get($color, "base"), 5%);
      box-shadow: 0 0 0 2px rgba(map-get($color, "base"),.5);
    }
  }
}

@each $name, $color in $neutral-colors {
  .btn--#{$name} {
    color: map-get($color, "contrast");
    background-color: map-get($color, "base");

    &:hover {
      background-color: darken(map-get($color, "base"), 5%);
    }

    &:focus {
      background-color: darken(map-get($color, "base"), 5%);
      box-shadow: 0 0 0 2px rgba(map-get($color, "base"),.5);
    }

    &:active {
      background-color: lighten(map-get($color, "base"), 5%);
      box-shadow: 0 0 0 2px rgba(map-get($color, "base"),.5);
    }
  }
}

/* Lightbox buttons */
#lightbox {
  .lb-nav {
    a {

      @include media-breakpoint-down(tb) {
        opacity: 1;
      }
    }
  }
}

/* Blog page buttons */
.vetera-comp-paging {
  display: none;
  
  .btn-paging {
    position: relative;
    opacity: 0.6;
  }
  
  .btn-paging.active {
    opacity: 1; 
    cursor: pointer;

    a {
      opacity: 1;
    }

    p {
      margin: 0;
    }
    
    .nav-text {
      position: absolute;
      top: -5px;
      left: 10px;
    }
  }
}

/* Shortcode button text */
.vetera-comp-blog-help {
  form {
    input.wpcf7-submit {
      position: absolute;
      font-size: 14px;
      word-break: break-word;
      width: auto !important;
    }
  }
} 